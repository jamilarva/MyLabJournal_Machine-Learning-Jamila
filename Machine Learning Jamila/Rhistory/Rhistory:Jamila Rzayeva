mutate(auc = h2o.auc(perf_h2o)) %>%
select(tpr, fpr, auc, precision, recall)
}
metrics_tb1 <- fs::dir_info(path = "raw_data/H2O/") %>%
select(path) %>%
mutate(metrics = map(path, get_models, testing)) %>%
unnest(cols = metrics)
metrics_tb1 %>% mutate(path = str_split(path, pattern = "/", simplify = T)[,3] %>% as_factor(),
auc  = auc %>% round(3) %>% as.character() %>% as_factor()) %>%
ggplot(aes(recall, precision, color = path, linetype = auc)) +
geom_line(size = 1) +
theme(
legend.direction = "vertical",
legend.position = "bottom"
) +
labs(
title = "Precision vs Recall Plot",
subtitle = "Top Performing Models"
)
lifted_tb1 <- performance %>%
h2o.gainsLift() %>%
as.tibble()
gain_tf_tb1 <- lifted_tb1 %>%
select(group,
cumulative_data_fraction,
cumulative_capture_rate,
cumulative_lift) %>%
select(-contains("lift")) %>%
mutate(baseline = cumulative_data_fraction) %>%
rename(gain     = cumulative_capture_rate) %>%
# Easier to plot colors
pivot_longer(cols = c(gain, baseline), values_to = "value", names_to = "key")
gain_tf_tb1 %>% ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +
geom_line(size = 1.5) +
labs(
title = "Gain Chart",
x = "Data Fraction (Cumulative)",
y = "Gain"
)
lift_tf_tb1 <- lifted_tb1 %>%
select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%
select(-contains("capture")) %>%
mutate(baseline = 1) %>%
rename(lift = cumulative_lift) %>%
pivot_longer(cols = c(lift, baseline), values_to = "value", names_to = "key")
lift_tf_tb1 %>% ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +
geom_line(size = 1.5) +
labs(
title = "Lift Chart",
x = "Data Fraction (Cumulative)",
y = "Lift"
)
library(cowplot)
library(glue)
#Set values
h2o_leaderboard <- h2o_model@leaderboard
newdata <- testing
order_by <- "auc"
max_models <- 4
size <- 1
#Helper Function
performance_plot_help <- function(h2o_leaderboard, newdata, order_by = c("auc", "logloss"),
max_models = 3, size = 1.5) {
# Handy Defs
leaderboard_tb1 <- h2o_leaderboard %>%
as_tibble() %>%
slice(1:max_models)
newdata_tbl <- newdata %>%
as_tibble()
order_by <- tolower(order_by[[1]])
order_by_expr <- rlang::sym(order_by)
h2o.no_progress()
# Model metrics
get_model_performance_metrics <- function(model_id, testing) {
model_h2o <- h2o.getModel(model_id)
perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(testing))
perf_h2o %>% h2o.metric() %>%
as.tibble() %>%
select(threshold, tpr, fpr, precision, recall)
}
metrics_tb1 <- leaderboard_tb1 %>%
mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %>%
unnest(cols = metrics) %>%
mutate(
model_id = as_factor(model_id) %>%
# programmatically reorder factors depending on order_by
fct_reorder(!! order_by_expr,
.desc = ifelse(order_by == "auc", TRUE, FALSE)),
auc      = auc %>%
round(3) %>%
as.character() %>%
as_factor() %>%
fct_reorder(as.numeric(model_id)),
logloss  = logloss %>%
round(4) %>%
as.character() %>%
as_factor() %>%
fct_reorder(as.numeric(model_id))
)
# 1A. ROC Plot
p1 <- metrics_tb1 %>%
ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +
geom_line(size = size) +
labs(title = "ROC", x = "FPR", y = "TPR") +
theme(legend.direction = "vertical")
# 1B. Precision vs Recall
p2 <- metrics_tb1 %>%
ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +
geom_line(size = size) +
labs(title = "Precision Vs Recall", x = "Recall", y = "Precision") +
theme(legend.position = "none")
# 2. Gain / Lift
get_gain_lift <- function(model_id, testing) {
model_h2o <- h2o.getModel(model_id)
perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(testing))
perf_h2o %>% h2o.gainsLift() %>%
as.tibble() %>%
select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)
}
lifted_tb1 <- leaderboard_tb1 %>%
mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %>%
unnest(cols = metrics) %>%
mutate(
model_id = as_factor(model_id) %>%
fct_reorder(!! order_by_expr,
.desc = ifelse(order_by == "auc", TRUE, FALSE)),
auc  = auc %>%
round(3) %>%
as.character() %>%
as_factor() %>%
fct_reorder(as.numeric(model_id)),
logloss = logloss %>%
round(4) %>%
as.character() %>%
as_factor() %>%
fct_reorder(as.numeric(model_id))
) %>%
rename(
gain = cumulative_capture_rate,
lift = cumulative_lift
)
# 2A. Gain Plot
p3 <- lifted_tb1 %>%
ggplot(aes(cumulative_data_fraction, gain,
color = model_id, linetype = !! order_by_expr)) +
geom_line(size = size,) +
geom_segment(x = 0, y = 0, xend = 1, yend = 1,
color = "red", size = size, linetype = "dotted") +
expand_limits(x = c(0, 1), y = c(0, 1)) +
labs(title = "Gain",
x = "Cumulative Data Fraction", y = "Gain") +
theme(legend.position = "none")
# 2B. Lift Plot
p4 <- lifted_tb1 %>%
ggplot(aes(cumulative_data_fraction, lift,
color = model_id, linetype = !! order_by_expr)) +
geom_line(size = size) +
geom_segment(x = 0, y = 1, xend = 1, yend = 1,
color = "red", size = size, linetype = "dotted") +
expand_limits(x = c(0, 1), y = c(0, 1)) +
labs(title = "Lift",
x = "Cumulative Data Fraction", y = "Lift") +
theme(legend.position = "none")
# Combine using cowplot
p_legend <- get_legend(p1)
p1 <- p1 + theme(legend.position = "none")
# combine multiple plots
p <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)
# drawing layer
p_title <- ggdraw() +
# draw text on a ggdraw layer / ggplot object
draw_label("H2O Model Metrics", size = 18, fontface = "bold", color = "#2C3E50")
p_subtitle <- ggdraw() +
draw_label(glue("Ordered by {toupper(order_by)}"), size = 10, color = "#2C3E50")
# The whole enchilada
ret <- plot_grid(p_title, p_subtitle, p, p_legend,
# Make sure everything fits
ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))
h2o.show_progress()
return(ret)
}
h2o_model@leaderboard %>%
performance_plot_help(newdata = testing, order_by = "logloss",
size = 0.5, max_models = 4)
#Import Library
library(tidyverse)
library(recipes)
library(readxl)
library(h2o)
library(lime)
library(readr)
library(dplyr)
library(purrr)
# Import Data
# Helper Function
process_data <- function(data, defs) {
definitions_list <- defs %>%
fill(...1, .direction = "down") %>%
filter(!is.na(...2)) %>%
separate(...2, into = c("key", "value"), sep = " '", remove = TRUE) %>%
rename(column_name = ...1) %>%
mutate(key = as.numeric(key)) %>%
mutate(value = value %>% str_replace(pattern = "'", replacement = "")) %>%
split(.$column_name) %>%
map(~ select(., -column_name)) %>%
map(~ mutate(., value = as_factor(value)))
for (i in seq_along(defs)) {
list_name <- names(defs)[i]
colnames(defs[[i]]) <- c(list_name, paste0(list_name, "_value"))
}
merged <- list(HR_Data = data) %>%
append(defs, after = 1) %>%
reduce(left_join) %>%
select(-one_of(names(defs))) %>%
set_names(str_replace_all(names(.), pattern = "_value",
replacement = "")) %>%
select(sort(names(.))) %>%
mutate_if(is.character, as.factor) %>%
mutate(BusinessTravel = BusinessTravel %>% fct_relevel("Non-Travel",
"Travel_Rarely",
"Travel_Frequently"),
MaritalStatus  = MaritalStatus %>% fct_relevel("Single",
"Married",
"Divorced"))
return(merged)
}
employee_tb1 <- read_csv("raw_data/HR-employee-attrition.csv")
definitions_tb1 <- read_excel("raw_data/data_definitions.xlsx", sheet = 1, col_names = FALSE)
attrition_tb1 <- process_data(employee_tb1, definitions_tb1)
#Import Library
library(tidyverse)
library(recipes)
library(readxl)
library(h2o)
library(lime)
library(readr)
library(dplyr)
library(purrr)
# Import Data
# Helper Function
process_data <- function(data, defs) {
def_list <- defs %>%
fill(...1, .direction = "down") %>%
filter(!is.na(...2)) %>%
separate(...2, into = c("key", "value"), sep = " '", remove = TRUE) %>%
rename(column_name = ...1) %>%
mutate(key = as.numeric(key)) %>%
mutate(value = value %>% str_replace(pattern = "'", replacement = "")) %>%
split(.$column_name) %>%
map(~ select(., -column_name)) %>%
map(~ mutate(., value = as_factor(value)))
for (i in seq_along(def_list)) {
list_name <- names(def_list)[i]
colnames(def_list[[i]]) <- c(list_name, paste0(list_name, "_value"))
}
merged <- list(HR_Data = data) %>%
append(defs, after = 1) %>%
reduce(left_join) %>%
select(-one_of(names(def_list))) %>%
set_names(str_replace_all(names(.), pattern = "_value",
replacement = "")) %>%
select(sort(names(.))) %>%
mutate_if(is.character, as.factor) %>%
mutate(BusinessTravel = BusinessTravel %>% fct_relevel("Non-Travel",
"Travel_Rarely",
"Travel_Frequently"),
MaritalStatus  = MaritalStatus %>% fct_relevel("Single",
"Married",
"Divorced"))
return(merged)
}
employee_tb1 <- read_csv("raw_data/HR-employee-attrition.csv")
definitions_tb1 <- read_excel("raw_data/data_definitions.xlsx", sheet = 1, col_names = FALSE)
attrition_tb1 <- process_data(employee_tb1, definitions_tb1)
rlang::last_error()
#Import Library
library(tidyverse)
library(recipes)
library(readxl)
library(h2o)
library(lime)
library(readr)
library(dplyr)
library(purrr)
# Import Data
# Helper Function
process_data <- function(data, defs) {
def_list <- defs %>%
fill(...1, .direction = "down") %>%
filter(!is.na(...2)) %>%
separate(...2, into = c("key", "value"), sep = " '", remove = TRUE) %>%
rename(column_name = ...1) %>%
mutate(key = as.numeric(key)) %>%
mutate(value = value %>% str_replace(pattern = "'", replacement = "")) %>%
split(.$column_name) %>%
map(~ select(., -column_name)) %>%
map(~ mutate(., value = as_factor(value)))
for (i in seq_along(def_list)) {
list_name <- names(def_list)[i]
colnames(def_list[[i]]) <- c(list_name, paste0(list_name, "_value"))
}
merged <- list(HR_Data = data) %>%
append(def_list, after = 1) %>%
reduce(left_join) %>%
select(-one_of(names(def_list))) %>%
set_names(str_replace_all(names(.), pattern = "_value",
replacement = "")) %>%
select(sort(names(.))) %>%
mutate_if(is.character, as.factor) %>%
mutate(BusinessTravel = BusinessTravel %>% fct_relevel("Non-Travel",
"Travel_Rarely",
"Travel_Frequently"),
MaritalStatus  = MaritalStatus %>% fct_relevel("Single",
"Married",
"Divorced"))
return(merged)
}
employee_tb1 <- read_csv("raw_data/HR-employee-attrition.csv")
definitions_tb1 <- read_excel("raw_data/data_definitions.xlsx", sheet = 1, col_names = FALSE)
attrition_tb1 <- process_data(employee_tb1, definitions_tb1)
# Split it
set.seed(seed = 1113)
split_obj <- rsample::initial_split(attrition_tb1, prop = 0.75,)
# Test and Training
training <- rsample::training(split_obj)
testing  <- rsample::testing(split_obj)
recipie <- recipe(Attrition ~ ., data = training) %>%
step_zv(all_predictors()) %>%
step_mutate_at(c("JobLevel", "StockOptionLevel"), fn = as.factor) %>%
prep()
train_tb1 <- bake(recipie, new_data = training)
test_tb1  <- bake(recipie, new_data = testing)
# Standard H2O set up
h2o.init()
split_h2o <- h2o.splitFrame(as.h2o(train_tb1), ratios = c(0.75), seed = 1234)
train_h2o <- split_h2o[[1]]
valid_h2o <- split_h2o[[2]]
test_h2o  <- as.h2o(test_tb1)
y <- "Attrition"
x <- setdiff(names(train_h2o), y)
# Run AutoML
h2o_model <- h2o.automl(x = x,
y = y,
training_frame    = train_h2o,
validation_frame  = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 30,
nfolds            = 5)
leader <- h2o_model@leader
setdiff( leader@allparameters$x, colnames(test_tb1) )
predictions_tbl <- leader %>%
h2o.predict(newdata = as.h2o(test_tb1)) %>%
as_tibble() %>%
bind_cols(
test_tb1 %>%
select(Attrition, EmployeeNumber)
)
explainer <- train_tb1 %>%
select(-Attrition) %>%
lime(
model           = automl_leader,
bin_continuous  = TRUE,
n_bins          = 4,
quantile_bins   = TRUE
)
#Import Library
library(tidyverse)
library(recipes)
library(readxl)
library(h2o)
library(lime)
library(readr)
library(dplyr)
library(purrr)
# Import Data
# Helper Function
process_data <- function(data, defs) {
def_list <- defs %>%
fill(...1, .direction = "down") %>%
filter(!is.na(...2)) %>%
separate(...2, into = c("key", "value"), sep = " '", remove = TRUE) %>%
rename(column_name = ...1) %>%
mutate(key = as.numeric(key)) %>%
mutate(value = value %>% str_replace(pattern = "'", replacement = "")) %>%
split(.$column_name) %>%
map(~ select(., -column_name)) %>%
map(~ mutate(., value = as_factor(value)))
for (i in seq_along(def_list)) {
list_name <- names(def_list)[i]
colnames(def_list[[i]]) <- c(list_name, paste0(list_name, "_value"))
}
merged <- list(HR_Data = data) %>%
append(def_list, after = 1) %>%
reduce(left_join) %>%
select(-one_of(names(def_list))) %>%
set_names(str_replace_all(names(.), pattern = "_value",
replacement = "")) %>%
select(sort(names(.))) %>%
mutate_if(is.character, as.factor) %>%
mutate(BusinessTravel = BusinessTravel %>% fct_relevel("Non-Travel",
"Travel_Rarely",
"Travel_Frequently"),
MaritalStatus  = MaritalStatus %>% fct_relevel("Single",
"Married",
"Divorced"))
return(merged)
}
employee_tb1 <- read_csv("raw_data/HR-employee-attrition.csv")
definitions_tb1 <- read_excel("raw_data/data_definitions.xlsx", sheet = 1, col_names = FALSE)
attrition_tb1 <- process_data(employee_tb1, definitions_tb1)
# Split it
set.seed(seed = 1113)
split_obj <- rsample::initial_split(attrition_tb1, prop = 0.75,)
# Test and Training
training <- rsample::training(split_obj)
testing  <- rsample::testing(split_obj)
recipie <- recipe(Attrition ~ ., data = training) %>%
step_zv(all_predictors()) %>%
step_mutate_at(c("JobLevel", "StockOptionLevel"), fn = as.factor) %>%
prep()
train_tb1 <- bake(recipie, new_data = training)
test_tb1  <- bake(recipie, new_data = testing)
# Standard H2O set up
h2o.init()
split_h2o <- h2o.splitFrame(as.h2o(train_tb1), ratios = c(0.75), seed = 1234)
train_h2o <- split_h2o[[1]]
valid_h2o <- split_h2o[[2]]
test_h2o  <- as.h2o(test_tb1)
y <- "Attrition"
x <- setdiff(names(train_h2o), y)
# Run AutoML
h2o_model <- h2o.automl(x = x,
y = y,
training_frame    = train_h2o,
validation_frame  = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 30,
nfolds            = 5)
leader <- h2o_model@leader
setdiff( leader@allparameters$x, colnames(test_tb1) )
predictions_tbl <- leader %>%
h2o.predict(newdata = as.h2o(test_tb1)) %>%
as_tibble() %>%
bind_cols(
test_tb1 %>%
select(Attrition, EmployeeNumber)
)
explainer <- train_tb1 %>%
select(-Attrition) %>%
lime(
model           = leader,
bin_continuous  = TRUE,
n_bins          = 4,
quantile_bins   = TRUE
)
explanation <- test_tb1 %>%
slice(1) %>%
select(-Attrition) %>%
lime::explain(
# Explainer object
explainer = explainer,
# Binary classification model: 1
n_labels   = 1,
# Features to return
n_features = 8,
# Linear Models
n_permutations = 5000,
# 1 is a good place to start
kernel_width   = 1
)
plot_features(explanation = explanation, ncol = 1)
ggplot(explanation %>% arrange(feature_weight),
aes(x=reorder(feature_desc, -feature_weight),
y=feature_weight,
fill = ifelse(feature_weight<0, 'Contradicts', 'Supports'))) +
geom_bar(stat="identity")  +
geom_col(aes_(~feature_desc, ~feature_weight)) +
labs(
title = "Case:1 \nLabel: No\nProbability: \nExplanation Fit:",
x="Feature",
y="Weight",
fill =""
) + coord_flip() +
scale_fill_manual("legend", values = c("Supports" = wes_palette("Darjeeling1",1),
"Contradicts" = wes_palette("Darjeeling1",2)[2]))+
theme(legend.position = "bottom")
explanation <- test_tb1 %>%
slice(1:20) %>%
select(-Attrition) %>%
lime::explain(
explainer = explainer,
n_labels   = 1,
n_features = 8,
n_permutations = 5000,
kernel_width   = 0.5
)
plot_explanations(explanation)
num_cases <- factor(explanation$case %>% as.numeric())
ggplot(explanation, aes(x=num_cases, y=feature_desc, fill= feature_weight)) +
scale_x_discrete(drop = FALSE) +
labs(
x="Case",
y="Feature",
fill ="Feature weight"
) +
geom_tile()  +
scale_fill_gradient2(low=wes_palette("Moonrise3", 1),
mid=wes_palette("Moonrise1", 3)[3] ,
high=wes_palette("Moonrise3", 2)[2]) +
facet_wrap(~ label) +
theme(legend.position = "bottom") +
theme_tq()
